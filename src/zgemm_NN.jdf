extern "C" %{
/*
 * Copyright (c) 2010-2020 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 *
 * @precisions normal z -> s d c
 * $COPYRIGHT
 *
 */
#include "dplasmajdf.h"
#include "dplasmaaux.h"
#include "parsec/data_dist/matrix/matrix.h"
#include "parsec/data_dist/matrix/two_dim_rectangle_cyclic.h"
#include <math.h>

#if defined(DPLASMA_HAVE_CUDA)
#include <cublas.h>
#endif  /* defined(DPLASMA_HAVE_CUDA) */

/* Define the different shapes this JDF is using */
#define A_SHAPE 0
#define B_SHAPE 1
#define C_SHAPE 2

/* Assume the functions on type & type_remote will return parsec_arena_datatype_t */
#define JDF2C_TYPE_ADT_NOT_INDEX

/* Include the functions to obtain the parsec_arena_datatype_t */
#include "dplasmajdf_lapack_dtt.h"
//#define FULL_CONVERSION
#ifdef FULL_CONVERSION
#define ADTT_READ(dM, loc, shape, layout) ADTT_DC(dM, loc, shape, layout)
#else
#define ADTT_READ(dM, loc, shape, layout) ADTT_DC(dM, loc, shape, LAPACK)
#endif

/* Note: with this approach to support LAPACK format and minimize
 * the number of tile conversions performed, it is critical to
 * determined the correct location on the matrix where the tile was
 * originated from.
 * Note that the LOC parameters do not correspond to the binding of the
 * task to the matrix (although sometimes they match). These parameters
 * correspond to the location were the datacopy was originate on the matrix (maybe
 * it was read on another task).
 * If there is no possibility to determine it (datacopy passed along multiple
 * tasks and that information is lost) the approach is to force a reshapping.
 *
 */

#include "zgemm_NN.h"

%}

/*
 * Globals
 */

/* Keep this first, as in all jdf in this directory, to
 * enable switching between GEMM implementations.
 */
gemm_type [ type = int hidden=on default="DPLASMA_ZGEMM_NN" ]

transA [ type = int ]
transB [ type = int ]

alpha  [type = dplasma_complex64_t]
beta   [type = dplasma_complex64_t]

ddescA     [type = "dplasma_data_collection_t*"]
descA      [type = "parsec_tiled_matrix_t*" hidden = on default = "((dplasma_data_collection_t*)ddescA)->dc_original" aligned=ddescA]

ddescB     [type = "dplasma_data_collection_t*"]
descB      [type = "parsec_tiled_matrix_t*" hidden = on default = "((dplasma_data_collection_t*)ddescB)->dc_original" aligned=ddescB]

ddescC     [type = "dplasma_data_collection_t*"]
descC      [type = "parsec_tiled_matrix_t*" hidden = on default = "((dplasma_data_collection_t*)ddescC)->dc_original" aligned=ddescC]

/** We need to keep the set of handle-globals the same between
 *  zgemm_*.jdf, to ensure that all handles can be destroyed
 *  with a generic function. P and Q are unused here. */
P      [type = "int" hidden=on default="-1"]
Q      [type = "int" hidden=on default="-1"]

/* Look ahead on both dimensions */
lookP  [type = "int" hidden=on default="dplasma_aux_getGEMMLookahead(descC)"]
lookQ  [type = "int" hidden=on default="dplasma_aux_getGEMMLookahead(descC)"]

/**************************************************
 *                       READ_A                   *
 **************************************************/
READ_A(m, k)  [profile = off]

m = 0 .. descA->mt-1
k = 0 .. descA->nt-1

loc_A = %{ return LOC(descA, m, k); %}

: descA(m, k)

READ A <- ddescA(m, k)                   [ type        = %{ return ADTT_READ(ddescA, loc_A, A_SHAPE, TILED); %}
                                           type_data   = %{ return ADTT_READ(ddescA, loc_A, A_SHAPE, LAPACK); %} ]
       -> A GEMM(m, 0 .. descC->nt-1, k) /* dep OUT: rely on datacopy dtt for sending */

CTL ctla <- (k >= lookQ) ? ctla GEMM(m, 0 .. descC->nt-1, k-lookQ)

BODY
{
    printlog("rank %u <- A(%d,%d)\n", ((parsec_data_collection_t*)descA)->myrank, m, k);
}
END

/**************************************************
 *                       READ_B                   *
 **************************************************/
READ_B(k, n) [profile = off]

k = 0 .. descB->mt-1
n = 0 .. descB->nt-1

loc_B = %{ return LOC(descB, k, n); %}

: descB(k, n)

READ B <- ddescB(k, n)                   [ type        = %{ return ADTT_READ(ddescB, loc_B, B_SHAPE, TILED); %}
                                           type_data   = %{ return ADTT_READ(ddescB, loc_B, B_SHAPE, LAPACK); %} ]
       -> B GEMM(0 .. descC->mt-1, n, k) /* dep OUT: rely on datacopy dtt for sending */

CTL ctlb <- (k >= lookP) ? ctlb GEMM(0 .. descC->mt-1, n, k-lookP)

BODY
{
     printlog("rank %u <- B(%d,%d)\n", ((parsec_data_collection_t*)descB)->myrank, k, n);
}
END

/**************************************************
 *                       GEMM                     *
 **************************************************/
GEMM(m, n, k) [ flops = inline_c%{ return FLOPS_ZGEMM(CLEAN_MB(descC, m), CLEAN_NB(descC, n), CLEAN_NB(descA, k)); %} ]

// Execution space
m = 0 .. descC->mt-1
n = 0 .. descC->nt-1
k = 0 .. descA->nt-1

loc_A = %{ return LOC(descA, m, k); %}
loc_B = %{ return LOC(descB, k, n); %}
loc_C = %{ return LOC(descC, m, n); %}

// Parallel partitioning
: descC(m, n)

// Parameters
READ A <- A READ_A(m, k)                              [ type_remote = %{ return ADTT_DC(ddescA, loc_A, A_SHAPE, TILED); %} ]
READ B <- B READ_B(k, n)                              [ type_remote = %{ return ADTT_DC(ddescB, loc_B, B_SHAPE, TILED); %} ]
RW   C <- (k == 0)             ? ddescC(m, n)         [ type        = %{ return ADTT_READ(ddescC, loc_C, C_SHAPE, TILED); %}
                                                        type_data   = %{ return ADTT_READ(ddescC, loc_C, C_SHAPE, LAPACK); %} ]
       <- (k != 0)             ? C GEMM( m, n, k-1 )  [ type_remote = %{ return ADTT_DC(ddescC, loc_C, C_SHAPE, TILED); %} ]
       -> (k == (descA->nt-1)) ? ddescC(m, n)         [ type        = %{ return ADTT_CP(_f_C, ddescC, loc_C, C_SHAPE); %}
                                                        type_data   = %{ return ADTT_DC(ddescC, loc_C, C_SHAPE, LAPACK); %} ]
       -> (k != (descA->nt-1)) ? C GEMM( m, n, k+1 )  /* dep OUT: rely on datacopy dtt for sending */


CTL ctla -> (k < (descA->nt-lookQ)) ? ctla READ_A(m, k+lookQ)
CTL ctlb -> (k < (descA->nt-lookP)) ? ctlb READ_B(k+lookP, n)

BODY [type=CUDA
      weight=(descA->nt-k)]
{
#if defined(PRECISION_z) || defined(PRECISION_c)
    cuDoubleComplex lalpha = make_cuDoubleComplex(creal(alpha), cimag(alpha));
    cuDoubleComplex lbeta  = (k == 0) ? make_cuDoubleComplex(creal(beta), cimag(beta))
                                      : make_cuDoubleComplex(1.0, 0.0);
#else
    double lalpha = alpha;
    double lbeta  = (k == 0) ? beta : 1.0;
#endif
    int tempmm = m == descC->mt-1 ? descC->m - m * descC->mb : descC->mb;
    int tempnn = n == descC->nt-1 ? descC->n - n * descC->nb : descC->nb;
    int tempkk = k == descA->nt-1 ? descA->n - k * descA->nb : descA->nb;
    int ldam = LDA(ddescA, A);
    int ldbk = LDA(ddescB, B);
    int ldcm = LDA(ddescC, C);

    cublasStatus_t status;
    cublasSetKernelStream( parsec_body.stream );
    cublasZgemm( dplasma_lapack_const(transA), dplasma_lapack_const(transB),
             tempmm, tempnn, tempkk,
             lalpha, (cuDoubleComplex*)A, ldam,
                     (cuDoubleComplex*)B, ldbk,
             lbeta,  (cuDoubleComplex*)C, ldcm );
    status = cublasGetError();
    PARSEC_CUDA_CHECK_ERROR( "cublasZgemm ", status,
                            {return -1;} );
}
END

BODY
{
    dplasma_complex64_t lbeta = (k == 0) ? beta : (dplasma_complex64_t)1.0;
    int tempmm = m == descC->mt-1 ? descC->m - m * descC->mb : descC->mb;
    int tempnn = n == descC->nt-1 ? descC->n - n * descC->nb : descC->nb;
    int tempkk = k == descA->nt-1 ? descA->n - k * descA->nb : descA->nb;
    int ldam = LDA(ddescA, A);
    int ldbk = LDA(ddescB, B);
    int ldcm = LDA(ddescC, C);

    CORE_zgemm(transA, transB,
               tempmm, tempnn, tempkk,
               alpha, A /*A(m, k)*/, ldam,
                      B /*B(k, n)*/, ldbk,
               lbeta, C /*C(m, n)*/, ldcm);

    printlog("gemm( %d, %d, %d )\n"
             "    ( %s, %s, %d, %d, %d, %f, A(%d,%d), %d, B(%d,%d), %d, %f, C(%d,%d), %d)\n",
             m, n, k,
             &dplasma_lapack_const( transA ), &dplasma_lapack_const( transB ),
             tempmm, tempnn, tempkk,
             creal(alpha), m, k, ldam,
                           k, n, ldbk,
             creal(lbeta), m, n, ldcm );
}
END
