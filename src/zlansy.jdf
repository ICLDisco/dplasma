extern "C" %{
/*
 *  Copyright (c) 2011-2022 The University of Tennessee and The University
 *                          of Tennessee Research Foundation.  All rights
 *                          reserved.
 *  Copyright (c) 2013      Inria. All rights reserved.
 *
 * @precisions normal z -> s d c
 *
 * This jdf returns the value of the infinity norm of a matrix A
 * where the infinity norm  of a matrix is the maximum row sum.
 *
 * This jdf is optimized for 2D-Block cyclic distributed data with a grid
 * P-by-Q.
 * The first step sums the local data of each rows.
 * The second finishes the sums on each rows. At the end of this step, all Q
 * processes belonging to a row have the same data.
 * The third step search the local maximum.
 * The fourth step combines the local maxima together. At the end all processes
 * owns the same value.
 *
 * The reductions are down by a pipeline followed by a broadcast of the results.
 *
 */
#include <math.h>
#include "dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"
#include "cores/sumsq_update.h"

#define my_rank_of(m, n) (((parsec_data_collection_t*)(descA))->rank_of((parsec_data_collection_t*)descA, m, n))
%}

/* Globals
 */
P            [type = "int"]
Q            [type = "int"]
PQ           [type = "int" hidden=on default="P*Q"]
ntype        [type = "dplasma_enum_t"]
uplo         [type = "dplasma_enum_t"]
trans        [type = "dplasma_enum_t"]
descA        [type = "const parsec_tiled_matrix_t*"]
Tdist        [type = "parsec_data_collection_t *"]
norm         [type = "double *"]


/**************************************************
 *
 *                    STEP 1
 *
 *  For j in [1,Q], W(m, j) = reduce( A(m, j+k*Q) )
 *
 **************************************************/
STEP1(m,n)

    // Execution space
    m = 0 .. descA->mt-1
    n = 0 .. descA->nt-1
    m1 = %{
    if ( (uplo == dplasmaLower && m < n) ||
         (uplo == dplasmaUpper && n < m) )
        return n;
    else
        return m;
    %}
    n1 = %{
    if ( (uplo == dplasmaLower && m < n) ||
         (uplo == dplasmaUpper && n < m) )
        return m;
    else
        return n;
    %}
    lr = %{ return my_rank_of( m1, n1 ); %}
    prevn = %{
        int nn = n-1;
        int r;
        while (nn > -1) {
            if ( (uplo == dplasmaLower && m  < nn) ||
                 (uplo == dplasmaUpper && nn < m ) )
                r = my_rank_of( nn, m );
            else
                r = my_rank_of( m, nn );
            if ( r == lr )
                break;
            else
                nn--;
        }
        return nn;
    %}

    nextn = %{
        int nn = n+1;
        int r;
        while (nn < descA->nt) {
            if ( (uplo == dplasmaLower && m  < nn) ||
                 (uplo == dplasmaUpper && nn < m ) )
                r = my_rank_of( nn, m );
            else
                r = my_rank_of( m, nn );
            if ( r == lr )
                break;
            else
                nn++;
        }
        return nn;
    %}

    // Parallel partitioning
    :descA(m1, n1)

    // Parameters
    READ A <-  descA(m1, n1)
    RW   W <-  ( prevn+1 >  0         ) ? W STEP1( m, prevn )                    [type_remote = COL]
           <-  ( prevn+1 <= 0         ) ? NEW                                    [type = COL]
           ->  ( nextn   <  descA->nt ) ? W STEP1( m, nextn ) : W STEP2( m, lr ) [type_remote = COL]

BODY
{
    int tempmm = ( m1 == (descA->mt-1) ) ? descA->m - m1 * descA->mb : descA->mb;
    int tempnn = ( n1 == (descA->nt-1) ) ? descA->n - n1 * descA->nb : descA->nb;
    int ldam = BLKLDD( descA, m );

    printlog("zlange STEP1(%d, %d)\n"
             "\t( tempmm=%d, tempnn=%d, A(%d, %d)[%p], lda=%d, W(%d,%d)[%p])\n",
             m, n, tempmm, tempnn, m, n, A, ldam, m, n%Q, W);

    double *dW = (double*)W;

    /*
     * Max norm
     */
    if (ntype == dplasmaMaxNorm) {
        double lnorm = 0.;
        if (!(prevn+1 > 0)) {
            *dW = 0.;
        }
        if ( n == m ) {
            if (trans == dplasmaConjTrans) {
                CORE_zlanhe(dplasmaMaxNorm, uplo, tempmm,
                            A, ldam, NULL, &lnorm);
            } else {
                CORE_zlansy(dplasmaMaxNorm, uplo, tempmm,
                            A, ldam, NULL, &lnorm);
            }
        } else {
            CORE_zlange(dplasmaMaxNorm, tempmm, tempnn,
                        A, ldam, NULL, &lnorm);
        }
        *dW = ( lnorm > *dW ) ? lnorm : *dW;
    }
    /*
     * Frobenius Norm
     */
    else if (ntype == dplasmaFrobeniusNorm) {
        if (!(prevn+1 > 0)) {
            dW[0] = 0.;
            dW[1] = 1.;
        }
        if ( n == m ) {
            if (trans == dplasmaConjTrans) {
                CORE_zhessq( uplo, tempmm, A, ldam, dW, dW+1);
            }
            else {
                CORE_zsyssq( uplo, tempmm, A, ldam, dW, dW+1);
            }
        } else {
            CORE_zgessq(tempmm, tempnn,
                        A, ldam, dW, dW+1 );
        }
    }
    /*
     * Inf and One -norms
     */
    else {
        if (!(prevn+1 > 0)) {
            memset( W, 0, descA->mb * sizeof(double) );
        }
        if ( m == n ) {
            CORE_dzasum(dplasmaRowwise, uplo,
                        tempmm, tempnn,
                        A, ldam, W);
        } else {

            /* !uplo side */
            if ( (uplo == dplasmaLower && m < n) ||
                 (uplo == dplasmaUpper && n < m) ) {
                CORE_dzasum(dplasmaColumnwise, dplasmaUpperLower,
                            tempmm, tempnn,
                            A, ldam, W);
                /* uplo side */
            } else {
                CORE_dzasum(dplasmaRowwise, dplasmaUpperLower,
                            tempmm, tempnn,
                            A, ldam, W);
            }
        }
    }
}
END

/**************************************************
 *                    STEP 2
 *
 *  For each j, W(m, j) = reduce( W(m, 0..Q-1) )
 *
 **************************************************/
STEP2(m, n)

    // Execution space
    m = 0 .. descA->mt-1
    n = 0 .. PQ-1
    hadtile = %{
        int nn = descA->nt-1;
        int r;
        while (nn > -1) {
            if ( (uplo == dplasmaLower && m  < nn) ||
                 (uplo == dplasmaUpper && nn < m ) )
                r = my_rank_of( nn, m );
            else
                r = my_rank_of( m, nn );
            if ( r == n )
                break;
            else
                nn--;
        }
        return nn;
        %}

    // Parallel partitioning
    :Tdist(m, n)

    // Parameters
    READ A <- ( n+Q < PQ )       ? W STEP2(m, n+Q)  : NULL                     [type_remote = COL]
    RW   W <- ((hadtile+1) == 0) ? NEW                                         [type = COL]
           <- ((hadtile+1) != 0) ? W STEP1(m, hadtile)                         [type_remote = COL]
           -> ( n < Q )          ? W STEP2BIS(m, n) : A STEP2(m, n-Q)          [type_remote = COL]

BODY
{
    int tempmm = ( m == (descA->mt-1) ) ? descA->m - m * descA->mb : descA->mb;

    printlog("zlange STEP2(%d, %d)\n"
             "\t( tempmm=%d, W(%d, %d) + W(%d, %d)\n",
             m, n, tempmm, m, n-1, m, n);

    double *dA = (double*)A;
    double *dW = (double*)W;

    if (ntype == dplasmaMaxNorm) {
        if ((hadtile+1) == 0) {
            *dW = 0.;
        }

        if(n+Q < PQ) {
            *dW = ( *dA > *dW ) ? *dA : *dW;
        }
    }
    else if (ntype == dplasmaFrobeniusNorm) {
        if ((hadtile+1) == 0) {
            dW[0] = 0.;
            dW[1] = 1.;
        }
        if(n+Q < PQ) {
            sumsq_update_2( dA, dA + 1, dW, dW + 1 );
	}
    }
    else {
        if ((hadtile+1) == 0) {
            memset( W, 0, descA->mb * sizeof(double) );
        }
        if(n+Q < PQ) {
            cblas_daxpy( tempmm, 1., dA, 1, dW, 1);
        }
    }
}
END

/**************************************************
 *                    STEP 2
 *
 *  For each j, W(m, j) = reduce( W(m, 0..Q-1) )
 *
 **************************************************/
STEP2BIS(m, n)

    // Execution space
    m = 0 .. descA->mt-1
    n = 0 .. Q-1

    // Parallel partitioning
    :Tdist(m, n)

    // Parameters
    READ A <- ( n == 0     ) ? NULL               : W STEP2BIS(m, n-1)   [type_remote = COL]
    RW   W <- W STEP2(m, n)                                              [type_remote = COL]
           -> ( n == (Q-1) ) ? A STEP3(m, 0..Q-1) : A STEP2BIS(m, n+1)   [type_remote = COL]

BODY
{
    int tempmm = ( m == (descA->mt-1) ) ? descA->m - m * descA->mb : descA->mb;

    printlog("zlange STEP2(%d, %d)\n"
             "\t( tempmm=%d, W(%d, %d) + W(%d, %d)\n",
             m, n, tempmm, m, n-1, m, n);

    if(n > 0)
    {
        double *dA = (double*)A;
        double *dW = (double*)W;

        if (ntype == dplasmaMaxNorm) {
            *dW = ( *dA > *dW ) ? *dA : *dW;
        }
        else if (ntype == dplasmaFrobeniusNorm) {
	    sumsq_update_2( dA, dA + 1, dW, dW + 1 );
        }
        else {
            cblas_daxpy( tempmm, 1., dA, 1, dW, 1);
        }
    }
}
END

/**************************************************
 *
 *                    STEP3
 *
 * For m in 0..P-1, W(m, n) = max( W(m..mt[P], n ) )
 *
 **************************************************/
STEP3(m, n)

    // Execution space
    m = 0 .. descA->mt-1
    n = 0 .. Q-1

    // Parallel partitioning
    :Tdist(m, n)

    // Parameters
    READ A <- W STEP2BIS(m, Q-1)                                           [type_remote = COL]
    RW   W <- (m <  (descA->mt-P)) ? W STEP3( m+P, n )                     [type_remote = ELT]
           <- (m >= (descA->mt-P)) ? NEW                                   [type = ELT]
           -> (m <  P            ) ? W STEP4( m,   n ) : W STEP3( m-P, n ) [type_remote = ELT]

BODY
{
    int tempmm = ( m == descA->mt-1) ? descA->m - m * descA->mb  : descA->mb;

    printlog("zlange STEP3(%d, %d)\n", m, n);

    double *dA = (double*)A;
    double *dW = (double*)W;

    if (ntype == dplasmaMaxNorm){
        if ( m < (descA->mt-P) ) {
            *dW = ( *dA > *dW ) ? *dA : *dW;
        } else {
            *dW = *dA;
        }
    }
    else if (ntype == dplasmaFrobeniusNorm) {
        if ( m >= (descA->mt-P) ) {
            dW[0] = 0.;
            dW[1] = 1.;
        }
	sumsq_update_2( dA, dA + 1, dW, dW + 1 );
    }
    else {
        double maxval = 0;
        int i;

        for(i = 0; i < tempmm; i++, dA++)
            maxval = ( maxval > *dA ) ? maxval : *dA;

        if ( m < (descA->mt-P) ) {
            *dW = ( maxval > *dW ) ? maxval : *dW;
        } else {
            *dW = maxval;
        }
    }
}
END

/**************************************************
 *                    STEP 4
 *
 *  For each i, W(i, n) = max( W(0..P-1, n) )
 *
 **************************************************/
STEP4(m,n)

    // Execution space
    m = 0..P-1
    n = 0..Q-1

    // Parallel partitioning
    :Tdist(m, n)

    // Parameters
    READ A <- ( m == 0 )            ? NULL                   : W STEP4(m-1, n) [type_remote = ELT]
    RW   W <- ( m >  (descA->mt-1)) ? NEW                                      [type = ELT]
           <- ( m <= (descA->mt-1)) ? W STEP3(m,   n)                          [type_remote = ELT]
           -> ( m == (P-1)        ) ? W WRITE_RES(0..P-1, n) : A STEP4(m+1, n) [type_remote = ELT]

BODY
{
    printlog("zlange STEP4(%d, %d)\n", m, n);

    double *dA = (double*)A;
    double *dW = (double*)W;
    if (ntype == dplasmaFrobeniusNorm) {
        if ( m > (descA->mt-1)) {
            dW[0] = 0.;
            dW[1] = 1.;
        }
        if(m > 0) {
	    sumsq_update_2( dA, dA + 1, dW, dW + 1 );
        }
    } else {
        if ( m > (descA->mt-1)) {
            *dW = 0.;
        }
        if(m > 0) {
            *dW = ( *dA > *dW ) ? *dA : *dW;
        }
    }
}
END

/**************************************************
 *                      STEP5                     *
 **************************************************/
WRITE_RES(m,n)

    // Execution space
    m = 0..P-1
    n = 0..Q-1

    // Parallel partitioning
    :Tdist(m, n)

    // Parameters
    READ W <- W STEP4( P-1, n )   [type_remote = ELT]

BODY
{
    printlog("zlange STORE RESULT(%d, %d)\n", m, n);

    double *dW = (double*)W;

    if (ntype == dplasmaFrobeniusNorm) {
        *norm = dW[0] * dplasma_dsqrt( dW[1] );
    } else {
        *norm = *dW;
    }
}
END
