extern "C" %{
/*
 * Copyright (c) 2010-2023 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 * $COPYRIGHT
 *
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"

#include "parsec/data_dist/matrix/subtile.h"
#include "parsec/recursive.h"

#if defined(DPLASMA_HAVE_CUDA)
#include "cores/dplasma_zcores.h"
#endif  /* defined(DPLASMA_HAVE_CUDA) */

/* Define the different shapes this JDF is using */
#define DEFAULT  0
#define LOWER    1
#define UPPER    2
#define LITTLE_T 3

/* Assume the functions on type & type_remote will return parsec_arena_datatype_t */
#define JDF2C_TYPE_ADT_NOT_INDEX

/* Include the functions to obtain the parsec_arena_datatype_t */
#include "dplasmajdf_lapack_dtt.h"
//#define FULL_CONVERSION
#ifdef FULL_CONVERSION
#define ADTT_READ(dM, loc, shape, layout) ADTT_DC(dM, loc, shape, layout)
#else
#define ADTT_READ(dM, loc, shape, layout) ADTT_DC(dM, loc, shape, LAPACK)
#endif

/* Note: with this approach to support LAPACK format and minimize
 * the number of tile conversions performed, it is critical to
 * determined the correct location on the matrix where the tile was
 * originated from.
 * Note that the LOC parameters do not correspond to the binding of the
 * task to the matrix (although sometimes they match). These parameters
 * correspond to the location were the datacopy was originate on the matrix (maybe
 * it was read on another task).
 * If there is no possibility to determine it (datacopy passed along multiple
 * tasks and that information is lost) the approach is to force a reshapping.
 *
 */

#include "zgeqrf.h"

%}

ddescA     [type = "dplasma_data_collection_t*"]
descA      [type = "parsec_tiled_matrix_t*" hidden = on default = "((dplasma_data_collection_t*)ddescA)->dc_original" aligned=ddescA]

ddescT     [type = "dplasma_data_collection_t*" aligned=ddescA]
descT      [type = "parsec_tiled_matrix_t*" hidden = on default = "((dplasma_data_collection_t*)ddescT)->dc_original" aligned=ddescA]

ib     [type = "int"]
p_work [type = "parsec_memory_pool_t *" size = "(sizeof(dplasma_complex64_t)*ib*descT->nb)"]
p_tau  [type = "parsec_memory_pool_t *" size = "(sizeof(dplasma_complex64_t)   *descT->nb)"]

smallnb [type = "int" hidden = on default = "descA->nb" ]

zgeqrt_typechange(k)  [profile = off]
  /* Execution space */
  k = 0 .. %{ return dplasma_imin((descA->nt-1),(descA->mt-1)); %}

loc_A = %{ return LOC(descA, k, k); %}

  : descA(k,k)

RW A <- A zgeqrt(k)                                             [ type_remote = %{ return ADTT_DC(ddescA, loc_A, DEFAULT, TILED); %} ]
     -> (k < (descA->nt-1)) ? A zunmqr(k, (k+1)..(descA->nt-1)) [ type_remote = %{ return ADTT_CP(_f_A, ddescA, loc_A, LOWER); %} ]
     -> ddescA(k, k)                                            [ type        = %{ return ADTT_CP(_f_A, ddescA, loc_A, LOWER); %}
                                                                  type_data   = %{ return ADTT_DC(ddescA, loc_A, LOWER, LAPACK); %} ]

BODY
{
    /* Nothing */
}
END

/**************************************************
 *                    zgeqrt                      *
 **************************************************/
zgeqrt(k)
  /* Execution space */
  k = 0 .. %{ return dplasma_imin((descA->nt-1),(descA->mt-1)); %}

loc_A = %{ return LOC(descA, k, k); %}
loc_T = %{ return LOC(descT, k, k); %}

  SIMCOST 4

  : descA(k,k)

  RW    A <- (0 == k) ? ddescA(k, k)                [ type        = %{ return ADTT_READ(ddescA, loc_A, DEFAULT, TILED); %}
                                                      type_data   = %{ return ADTT_READ(ddescA, loc_A, DEFAULT, LAPACK); %} ]
          <- (0 != k) ? A2 ztsmqr(k-1, k, k)        [ type_remote = %{ return ADTT_DC(ddescA, loc_A, DEFAULT, TILED); %} ]
          -> (descA->mt==(k+1)) ? ddescA(k,k)       [ type        = %{ return ADTT_CP(_f_A, ddescA, loc_A, DEFAULT); %}
                                                      type_data   = %{ return ADTT_DC(ddescA, loc_A, DEFAULT, LAPACK); %} ]
          -> (descA->mt>=(k+2)) ? A1 ztsqrt(k, k+1) [ type_remote = %{ return ADTT_CP(_f_A, ddescA, loc_A, UPPER); %} ]
          -> A zgeqrt_typechange(k)                 /* dep OUT: rely on datacopy dtt for sending */

  RW    T <- ddescT(k, k)                           [ type        = %{ return ADTT_READ(ddescT, loc_T, LITTLE_T, TILED); %}
                                                      type_data   = %{ return ADTT_READ(ddescT, loc_T, LITTLE_T, LAPACK); %} ]
          -> ddescT(k, k)                           [ type        = %{ return ADTT_CP(_f_T, ddescT, loc_T, LITTLE_T); %}
                                                      type_data   = %{ return ADTT_DC(ddescT, loc_T, LITTLE_T, LAPACK); %} ]
          -> (descA->nt-1 > k) ? T zunmqr(k, (k+1)..(descA->nt-1)) /* dep OUT: rely on datacopy dtt for sending */

  /* Priority */
  ;(descA->nt-k)*(descA->nt-k)*(descA->nt-k)

BODY [type=RECURSIVE]
{
    int tempkm = (k == (descA->mt-1)) ? (descA->m - k * descA->mb) : descA->mb;
    int tempkn = (k == (descA->nt-1)) ? (descA->n - k * descA->nb) : descA->nb;
    int ldak = BLKLDD( descA, k );

    printlog("CORE_zgeqrt(%d)\n"
             "\t(tempkm, tempkn, ib, A(%d,%d)[%p], ldak, T(%d,%d)[%p], descT->mb, p_elem_A, p_elem_B)\n",
             k, k, k, A, k, k, T);

    if (tempkm > smallnb) {
        subtile_desc_t *small_descA;
        subtile_desc_t *small_descT;
        parsec_taskpool_t *parsec_zgeqrt;


        small_descA = subtile_desc_create( descA, k, k,
                                           dplasma_imin(descA->mb, ldak), smallnb,
                                           0, 0, tempkm, tempkn );
        small_descT = subtile_desc_create( descT, k, k,
                                           ib, smallnb,
                                           0, 0, ib, tempkn );

        small_descA->mat = A;
        small_descT->mat = T;

        /* parsec_object */
        parsec_zgeqrt = dplasma_zgeqrfr_geqrt_New( (parsec_tiled_matrix_t *)small_descA,
                                                  (parsec_tiled_matrix_t *)small_descT,
                                                  p_work );

        /* recursive call */
        parsec_recursivecall((parsec_task_t*)this_task,
                             parsec_zgeqrt, dplasma_zgeqrfr_geqrt_Destruct,
                             2, small_descA, small_descT);

        return PARSEC_HOOK_RETURN_ASYNC;
    }
    return PARSEC_HOOK_RETURN_NEXT;
}
END

BODY
{
    int tempkm = ((k)==(descA->mt-1)) ? (descA->m-(k*descA->mb)) : descA->mb;
    int tempkn = ((k)==(descA->nt-1)) ? (descA->n-(k*descA->nb)) : descA->nb;
    int ldak_A = LDA(ddescA, A);
    int ldak_T = LDA(ddescT, T);

    printlog("CORE_zgeqrt(%d)\n"
             "\t(tempkm, tempkn, ib, A(%d,%d)[%p], ldak, T(%d,%d)[%p], descT->mb, p_elem_A, p_elem_B)\n",
             k, k, k, A, k, k, T);


    void *p_elem_A = parsec_private_memory_pop( p_tau );
    void *p_elem_B = parsec_private_memory_pop( p_work );

    CORE_zgeqrt(tempkm, tempkn, ib,
                A /* descA(k,k) */, ldak_A,
                T /* descT(k,k) */, ldak_T,
                p_elem_A, p_elem_B );

    parsec_private_memory_push( p_tau,  p_elem_A );
    parsec_private_memory_push( p_work, p_elem_B );

}
END


/**************************************************
 *                    zunmqr                      *
 **************************************************/
zunmqr(k,n)
  /* Execution space */
  k = 0   .. %{ return dplasma_imin((descA->nt-2),(descA->mt-1)); %}
  n = k+1 .. descA->nt-1

loc_A = %{ return LOC(descA, k, k); %}
loc_T = %{ return LOC(descT, k, k); %}
loc_C = %{ return LOC(descA, k, n); %}

  SIMCOST 6

  : descA(k,n)

  READ  A <- A zgeqrt_typechange(k)                        [ type_remote = %{ return ADTT_DC(ddescA, loc_A, LOWER, TILED); %} ]
  READ  T <- T zgeqrt(k)                                   [ type_remote = %{ return ADTT_DC(ddescT, loc_T, LITTLE_T, TILED); %} ]
  RW    C <- (k == 0) ? ddescA(k, n)                       [ type        = %{ return ADTT_READ(ddescA, loc_C, DEFAULT, TILED); %}
                                                             type_data   = %{ return ADTT_READ(ddescA, loc_C, DEFAULT, LAPACK); %} ]
          <- (k != 0) ? A2 ztsmqr(k-1, k, n)               [ type_remote = %{ return ADTT_DC(ddescA, loc_C, DEFAULT, TILED); %} ]
          -> (k == (descA->mt-1)) ? ddescA(k, n)           [ type        = %{ return ADTT_CP(_f_C, ddescA, loc_C, DEFAULT); %}
                                                             type_data   = %{ return ADTT_DC(ddescA, loc_C, DEFAULT, LAPACK); %} ]
          -> (k <  (descA->mt-1)) ? A1 ztsmqr(k, k+1, n)   /* dep OUT: rely on datacopy dtt for sending */

BODY [type=RECURSIVE]
{
    int tempkm = ((k)==(descA->mt-1)) ? (descA->m-(k*descA->mb)) : descA->mb;
    int tempnn = ((n)==(descA->nt-1)) ? (descA->n-(n*descA->nb)) : descA->nb;
    int ldak = BLKLDD( descA, k );

    if (tempkm > smallnb) {
        subtile_desc_t *small_descA;
        subtile_desc_t *small_descT;
        subtile_desc_t *small_descC;
        parsec_taskpool_t *parsec_zunmqr_panel;


        small_descA = subtile_desc_create( descA, k, k,
                                           dplasma_imin(descA->mb, ldak), smallnb,
                                           0, 0, tempkm, tempkm );
        small_descC = subtile_desc_create( descA, k, n,
                                           dplasma_imin(descA->mb, ldak), smallnb,
                                           0, 0, tempkm, tempnn );
        small_descT = subtile_desc_create( descT, k, k,
                                           ib, smallnb,
                                           0, 0, ib, tempkm );

        small_descA->mat = A;
        small_descC->mat = C;
        small_descT->mat = T;

        /* parsec_object */
        parsec_zunmqr_panel = dplasma_zgeqrfr_unmqr_New( (parsec_tiled_matrix_t *)small_descA,
                                                        (parsec_tiled_matrix_t *)small_descT,
                                                        (parsec_tiled_matrix_t *)small_descC,
                                                        p_work );

        /* recursive call */
        parsec_recursivecall((parsec_task_t*)this_task,
                             parsec_zunmqr_panel, dplasma_zgeqrfr_unmqr_Destruct,
                             3, small_descA, small_descC, small_descT);

        return PARSEC_HOOK_RETURN_ASYNC;
    }
    return PARSEC_HOOK_RETURN_NEXT;
}
END

BODY
{
    int tempkm = ((k)==(descA->mt-1)) ? (descA->m-(k*descA->mb)) : descA->mb;
    int tempnn = ((n)==(descA->nt-1)) ? (descA->n-(n*descA->nb)) : descA->nb;
    int ldak_A = LDA(ddescA, A);
    int ldak_T = LDA(ddescT, T);
    int ldak_C = LDA(ddescA, C);


    printlog("CORE_zunmqr(%d, %d)\n"
             "\t(dplasmaLeft, dplasmaConjTrans, tempkm, tempnn, tempkm, ib, A(%d,%d)[%p], ldak, T(%d,%d)[%p], descT->mb, A(%d,%d)[%p], ldak, p_elem_A, descT->nb)\n",
             k, n, k, k, A, k, k, T, k, n, C);


    void *p_elem_A = parsec_private_memory_pop( p_work );

    CORE_zunmqr(dplasmaLeft, dplasmaConjTrans,
                tempkm, tempnn, tempkm, ib,
                A /* descA(k,k) */, ldak_A,
                T /* descT(k,k) */, ldak_T,
                C /* descA(k,n) */, ldak_C,
                p_elem_A, descT->nb );


    parsec_private_memory_push( p_work, p_elem_A );

}
END


ztsqrt_out_Ak(k) [profile = off]
  k = 0..( (descA->mt <= descA->nt) ? descA->mt-2 : descA->nt-1 )

loc_A1 = %{ return LOC(descA, k, k); %}

  : descA(k, k)

  RW A1 <- A1 ztsqrt(k, descA->mt-1)   [ type_remote = %{ return ADTT_DC(ddescA, loc_A1, UPPER, TILED); %} ]
        -> ddescA(k, k)                [ type        = %{ return ADTT_CP(_f_A1, ddescA, loc_A1, UPPER); %}
                                         type_data   = %{ return ADTT_DC(ddescA, loc_A1, UPPER, LAPACK); %} ]
BODY
{
    /* nothing */
    //int ldak_A1 =  LDA(ddescA, A1);
}
END

/**************************************************
 *                    ztsqrt                      *
 **************************************************/
ztsqrt(k,m)
  /* Execution space */
  k = 0   .. %{ return dplasma_imin((descA->nt-1),(descA->mt-2)); %}
  m = k+1 .. descA->mt-1

loc_A1 = %{ return LOC(descA, k, k); %}
loc_A2 = %{ return LOC(descA, m, k); %}
loc_T  = %{ return LOC(descT, m, k); %}

  SIMCOST 6

  : descA(m, k)

  RW   A1 <- ( m == (k+1)        ) ? A zgeqrt(m-1) : A1 ztsqrt(k, m-1)       [ type_remote = %{ return ADTT_DC(ddescA, loc_A1, UPPER, TILED); %} ]
          -> ( m == (descA->mt-1)) ? A1 ztsqrt_out_Ak(k) : A1 ztsqrt(k, m+1) [ type_remote = %{ return ADTT_DC(ddescA, loc_A1, UPPER, TILED); %} ]
                                                                             /* can't rely on datacopy dtt: != shape from datacollection only if remote */

  RW   A2 <- (k == 0) ? ddescA(m, k)                                         [ type        = %{ return ADTT_READ(ddescA, loc_A2, DEFAULT, TILED); %}
                                                                               type_data   = %{ return ADTT_READ(ddescA, loc_A2, DEFAULT, LAPACK); %} ]
          <- (k != 0) ? A2 ztsmqr(k-1, m, k)                                 /* dep OUT: rely on datacopy dtt for sending */
          -> ddescA(m, k)                                                    [ type        = %{ return ADTT_CP(_f_A2, ddescA, loc_A2, DEFAULT); %}
                                                                               type_data   = %{ return ADTT_DC(ddescA, loc_A2, DEFAULT, LAPACK); %} ]
          -> (k < (descA->nt-1)) ? V ztsmqr(k, m, (k+1)..(descA->nt-1))      /* dep OUT: rely on datacopy dtt for sending */

  RW   T  <- ddescT(m, k)                                                    [ type        = %{ return ADTT_READ(ddescT, loc_T, LITTLE_T, TILED); %}
                                                                               type_data   = %{ return ADTT_READ(ddescT, loc_T, LITTLE_T, LAPACK); %} ]
          -> ddescT(m, k)                                                    [ type        = %{ return ADTT_CP(_f_T, ddescT, loc_T, LITTLE_T); %}
                                                                               type_data   = %{ return ADTT_DC(ddescT, loc_T, LITTLE_T, LAPACK); %} ]
          -> (k < (descA->nt-1)) ? T ztsmqr(k, m, (k+1)..(descA->nt-1))      /* dep OUT: rely on datacopy dtt for sending */

    /* Priority */
; (descA->mt-k)*(descA->mt-k)*(descA->mt-k)

BODY [type=RECURSIVE]
{
    int tempmm = ((m)==(descA->mt-1)) ? (descA->m-(m*descA->mb)) : descA->mb;
    int tempkn = ((k)==(descA->nt-1)) ? (descA->n-(k*descA->nb)) : descA->nb;
    int ldak = BLKLDD( descA, k );
    int ldam = BLKLDD( descA, m );

    if (tempmm > smallnb) {
        subtile_desc_t *small_descA1;
        subtile_desc_t *small_descA2;
        subtile_desc_t *small_descT;
        parsec_taskpool_t *parsec_ztsqrt;


        small_descA1 = subtile_desc_create( descA, k, k,
                                            dplasma_imin(descA->mb, ldak), smallnb,
                                            0, 0, tempkn, tempkn );
        small_descA2 = subtile_desc_create( descA, m, k,
                                            dplasma_imin(descA->mb, ldam), smallnb,
                                            0, 0, tempmm, tempkn );
        small_descT = subtile_desc_create( descT, m, k,
                                           ib, smallnb,
                                           0, 0, ib, tempkn );

        small_descA1->mat = A1;
        small_descA2->mat = A2;
        small_descT->mat = T;

        /* parsec_object */
        parsec_ztsqrt = dplasma_zgeqrfr_tsqrt_New((parsec_tiled_matrix_t *)small_descA1,
                                                 (parsec_tiled_matrix_t *)small_descA2,
                                                 (parsec_tiled_matrix_t *)small_descT,
                                                 p_work, p_tau );

        /* recursive call */
        parsec_recursivecall((parsec_task_t*)this_task,
                             parsec_ztsqrt, dplasma_zgeqrfr_tsqrt_Destruct,
                             3, small_descA1, small_descA2, small_descT);

        return PARSEC_HOOK_RETURN_ASYNC;
    }
    return PARSEC_HOOK_RETURN_NEXT;
}
END

BODY
{
    int tempmm = ((m)==(descA->mt-1)) ? (descA->m-(m*descA->mb)) : descA->mb;
    int tempkn = ((k)==(descA->nt-1)) ? (descA->n-(k*descA->nb)) : descA->nb;
    int ldak_A1 = LDA(ddescA, A1);
    int ldam_A2 = LDA(ddescA, A2);
    int ldam_T  = LDA(ddescT, T);


    printlog("CORE_ztsqrt(%d, %d)\n"
             "\t(tempmm, tempkn, ib, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldam, T(%d,%d)[%p], descT->mb, p_elem_A, p_elem_B)\n",
             k, m, k, k, T, m, k, A1, m, k, A2);


    void *p_elem_A = parsec_private_memory_pop( p_tau );
    void *p_elem_B = parsec_private_memory_pop( p_work );

    CORE_ztsqrt(tempmm, tempkn, ib,
                A1 /* descA(k,k) */, ldak_A1,
                A2 /* descA(m,k) */, ldam_A2,
                T  /* descT(m,k) */, ldam_T,
                p_elem_A, p_elem_B );

    parsec_private_memory_push( p_tau,  p_elem_A );
    parsec_private_memory_push( p_work, p_elem_B );

}
END


ztsmqr_out_A1(k, n) [profile = off]
  k = 0   .. %{ return dplasma_imin((descA->nt-2),(descA->mt-2)); %}
  n = k+1 .. descA->nt-1

loc_A1 = %{ return LOC(descA, k, n); %}

  : descA(k, n)

  RW A1 <- A1 ztsmqr(k, descA->mt-1, n) [ type_remote = %{ return ADTT_DC(ddescA, loc_A1, DEFAULT, TILED); %} ]
        -> ddescA(k, n)                 [ type        = %{ return ADTT_CP(_f_A1, ddescA, loc_A1, DEFAULT); %}
                                          type_data   = %{ return ADTT_DC(ddescA, loc_A1, DEFAULT, LAPACK); %} ]
BODY
{
    /* nothing */
}
END


/**************************************************
 *                    ztsmqr                      *
 **************************************************/
ztsmqr(k,m,n)
  /* Execution space */
  k = 0     .. %{ return dplasma_imin((descA->mt-2),(descA->nt-2)); %}
  m = (k+1) .. (descA->mt-1)
  n = (k+1) .. (descA->nt-1)

loc_A1 = %{ return LOC(descA, k, n); %}
loc_A2 = %{ return LOC(descA, m, n); %}
loc_V  = %{ return LOC(descA, m, k); %}
loc_T  = %{ return LOC(descT, m, k); %}

  SIMCOST 12

  : descA(m, n)

  RW   A1 <- ( (k+1) == m ) ? C zunmqr(m-1, n) : A1 ztsmqr(k, m-1, n)                     [ type_remote = %{ return ADTT_DC(ddescA, loc_A1, DEFAULT, TILED); %} ]
          -> ( m == (descA->mt-1) ) ? A1 ztsmqr_out_A1(k, n) : A1 ztsmqr(k, m+1, n)       /* dep OUT: rely on datacopy dtt for sending */

  RW   A2 <- (0==k) ? ddescA(m, n)                                                        [ type        = %{ return ADTT_READ(ddescA, loc_A2, DEFAULT, TILED); %}
                                                                                            type_data   = %{ return ADTT_READ(ddescA, loc_A2, DEFAULT, LAPACK); %} ]
          <- (0!=k) ? A2 ztsmqr(k-1, m, n)                                                [ type_remote = %{ return ADTT_DC(ddescA, loc_A2, DEFAULT, TILED); %} ]
          -> (((k+1) == n) & ((k+1) == m)) ? A  zgeqrt(n)        /* Diagonal */           /* dep OUT: rely on datacopy dtt for sending */
          -> (((k+1) == m) & (    n > m )) ? C  zunmqr(k+1, n)   /* Next row */           /* dep OUT: rely on datacopy dtt for sending */
          -> (((k+1) == n) & (    m > n )) ? A2 ztsqrt(n, m)     /* Next column */        /* dep OUT: rely on datacopy dtt for sending */
          -> (((k+1) <  n) & ((1+k) < m )) ? A2 ztsmqr(k+1, m, n)/* trailing submatrix */ /* dep OUT: rely on datacopy dtt for sending */

  READ V  <- A2 ztsqrt(k, m)                                                              [ type_remote = %{ return ADTT_DC(ddescA, loc_V, DEFAULT, TILED); %} ]
  READ T  <- T  ztsqrt(k, m)                                                              [ type_remote = %{ return ADTT_DC(ddescT, loc_T, LITTLE_T, TILED); %} ]

    /* Priority */
; (descA->mt-k)*(descA->mt-n)*(descA->mt-n)

BODY [type=CUDA device=%{ return n; %}
      A1.size=%{ return descA->mb*descA->nb*parsec_datadist_getsizeoftype(descA->mtype);%}
      A2.size=%{ return descA->mb*descA->nb*parsec_datadist_getsizeoftype(descA->mtype);%}
      V.size=%{ return descA->mb*descA->nb*parsec_datadist_getsizeoftype(descA->mtype);%}
      T.size=%{ return descT->mb*descT->nb*parsec_datadist_getsizeoftype(descT->mtype);%}
      A1.dc=ddescA A2.dc=ddescA V.dc=ddescA T.dc=ddescT
      stage_in=stage_in_lapack
      stage_out=stage_out_lapack]
{
    dplasma_complex64_t *WORK, *WORKC;
    int tempmm = ((m)==(descA->mt-1)) ? (descA->m-(m*descA->mb)) : descA->mb;
    int tempnn = ((n)==(descA->nt-1)) ? (descA->n-(n*descA->nb)) : descA->nb;
    int ldak_A1 = descA->mb;
    int ldam_A2 = descA->mb;
    int ldam_V  = descA->mb;
    int ldam_T  = descT->mb;

    WORK  = parsec_gpu_pop_workspace(gpu_device, gpu_stream, descA->nb * ib * sizeof(dplasma_complex64_t));
    WORKC = parsec_gpu_pop_workspace(gpu_device, gpu_stream, descA->mb * ib * sizeof(dplasma_complex64_t));

    dplasma_cuda_ztsmqr( dplasmaLeft, dplasmaConjTrans,
                         descA->mb, tempnn, tempmm, tempnn, descA->nb, ib,
                         A1 /* descA(k,n) */, ldak_A1,
                         A2 /* descA(m,n) */, ldam_A2,
                         V  /* descA(m,k) */, ldam_V,
                         T  /* descT(m,k) */, ldam_T,
                         WORK,  ib,
                         WORKC, descA->mb,
                         parsec_body.stream );

      parsec_gpu_push_workspace(gpu_device, gpu_stream);
}
END

BODY [type=RECURSIVE]
{
    int tempmm = (m == (descA->mt-1)) ? (descA->m - m * descA->mb) : descA->mb;
    int tempnn = (n == (descA->nt-1)) ? (descA->n - n * descA->nb) : descA->nb;
    int ldak = BLKLDD( descA, k );
    int ldam = BLKLDD( descA, m );

    if (tempmm > smallnb) {
        subtile_desc_t *small_descA1;
        subtile_desc_t *small_descA2;
        subtile_desc_t *small_descV;
        subtile_desc_t *small_descT;
        parsec_taskpool_t *parsec_ztsmqr;


        small_descA1 = subtile_desc_create( descA, k, n,
                                            dplasma_imin(descA->mb, ldak), smallnb,
                                            0, 0, descA->mb, tempnn );
        small_descA2 = subtile_desc_create( descA, m, n,
                                            dplasma_imin(descA->mb, ldam), smallnb,
                                            0, 0, tempmm, tempnn );
        small_descV = subtile_desc_create( descA, m, k,
                                           dplasma_imin(descA->mb, ldam), smallnb,
                                           0, 0, tempmm, descA->nb );
        small_descT = subtile_desc_create( descT, m, k,
                                           ib, smallnb,
                                           0, 0, ib, descA->nb );

        small_descA1->mat = A1;
        small_descA2->mat = A2;
        small_descV->mat  = V;
        small_descT->mat  = T;

        /* parsec_object */
        parsec_ztsmqr = dplasma_zgeqrfr_tsmqr_New( (parsec_tiled_matrix_t *)small_descA1,
                                                  (parsec_tiled_matrix_t *)small_descA2,
                                                  (parsec_tiled_matrix_t *)small_descV,
                                                  (parsec_tiled_matrix_t *)small_descT,
                                                  p_work );

        /* recursive call */
        parsec_recursivecall((parsec_task_t*)this_task,
                             parsec_ztsmqr, dplasma_zgeqrfr_tsmqr_Destruct,
                             4, small_descA1, small_descA2, small_descV, small_descT);

        return PARSEC_HOOK_RETURN_ASYNC;
    }
    return PARSEC_HOOK_RETURN_NEXT;
}
END

BODY
{
    int tempmm = ((m)==(descA->mt-1)) ? (descA->m-(m*descA->mb)) : descA->mb;
    int tempnn = ((n)==(descA->nt-1)) ? (descA->n-(n*descA->nb)) : descA->nb;
    int ldak_A1 = LDA(ddescA, A1);
    int ldam_A2 = LDA(ddescA, A2);
    int ldam_V  = LDA(ddescA, V);
    int ldam_T  = LDA(ddescT, T);
    int ldwork = ib;


    printlog("CORE_ztsmqr(%d, %d, %d)\n"
             "\t(dplasmaLeft, dplasmaConjTrans, descA->mb, tempnn, tempmm, tempnn, descA->nb, ib, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldam, A(%d,%d)[%p], ldam, T(%d,%d)[%p], descT->mb, p_elem_A, ldwork)\n",
             k, m, n, k, n, A1, m, n, A2, m, k, V, m, k, T);

    void *p_elem_A = parsec_private_memory_pop( p_work );

    CORE_ztsmqr(dplasmaLeft, dplasmaConjTrans,
                descA->mb, tempnn, tempmm, tempnn, descA->nb, ib,
                A1 /* descA(k,n) */, ldak_A1,
                A2 /* descA(m,n) */, ldam_A2,
                V  /* descA(m,k) */, ldam_V,
                T  /* descT(m,k) */, ldam_T,
                p_elem_A, ldwork );

    parsec_private_memory_push( p_work, p_elem_A );

}
END
